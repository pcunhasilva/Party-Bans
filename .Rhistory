# they overlapped.
points(voters[Avoters, ], pch=20, col=rgb(1, 0, 0, alpha=0.25))
points(voters[Bvoters, ], pch=20, col=rgb(0, 0, 1, alpha=0.25))
# The parties' locations are marked with trangles.
points(x=parties$A[1], y=parties$A[2], pch=24, col='black', bg='red')
points(x=parties$B[1], y=parties$B[2],  pch=24, col='black', bg='blue')
legend('topleft', legend=c('Party A', 'Party B', 'A Voters', 'B Voters'),
col=c('red', 'blue', 'red', 'blue'), pch=c(17, 17, 20, 20), bty='n')
}
voterPlot(t="St. Louis", dim1="economic", dim2="social")
vts <- mkVoters(1000, dist='mvnorm', sigma=diag(2:3))
ptys <- mkParties()
voterPlot(d, ptys)
ptys <- mkParties()
voterPlot(voters=vts, parties=ptys, affiliations=NULL, t=MO, dim1="economic", dim2="social")
voterPlot(voters=vts, parties=ptys, affiliations=NULL, t="MO", dim1="economic", dim2="social")
voterPlot <- function(voters=NULL, parties=NULL, affiliations=NULL,
t=NULL, dim1=NULL, dim2=NULL){
# The user can define the voters' and parties' location and the affiliation rule.
# If the user leave it blank, then the function would take care of everything
# according to the above defined rules.
if ( is.null(voters) ) {
voters <- mkVoters(1000)
}
if ( is.null(parties) ) {
parties <- mkParties()
}
if ( is.null(affiliations) ) {
affiliations <- affiliate(voters, parties)
}
# With the argument "t", the user can specify the iteration stage in the headline.
if ( !is.null(t) ) {
t <- paste('at t', t)
}
# Find the max and min in the data. The y axis and x axis will adjust accordingly
# so every point can be seen.
ymin <- min(c(voters[ , 2], parties$A[2], parties$B[2]))
ymax <- max(c(voters[ , 2], parties$A[2], parties$B[2]))
xmin <- min(c(voters[ , 1], parties$A[1], parties$B[1]))
xmax <- max(c(voters[ , 1], parties$A[1], parties$B[1]))
# Record voters' party affiliations and differentiate them by colors in the plot.
Avoters <- which(affiliations=='A')
Bvoters <- which(affiliations=='B')
plot(NULL, ylim=c(ymin, ymax), xlim=c(xmin, xmax),
# The user can difine the names of the 2 dimensions, for example, "economic" and
# "social" with the argument dim1 and dim2.
xlab=ifelse(is.null(dim1), 'Dimension 1', dim1),
ylab=ifelse(is.null(dim1), 'Dimension 2', dim2),
main=paste('Distribution of Voters and Parties', t))
# Voters affiliated to different parties are differentiated by different colors.
# Each single point has been made transparent so the density can be seen when
# they overlapped.
points(voters[Avoters, ], pch=20, col=rgb(1, 0, 0, alpha=0.25))
points(voters[Bvoters, ], pch=20, col=rgb(0, 0, 1, alpha=0.25))
# The parties' locations are marked with trangles.
points(x=parties$A[1], y=parties$A[2], pch=24, col='black', bg='red')
points(x=parties$B[1], y=parties$B[2],  pch=24, col='black', bg='blue')
legend('topleft', legend=c('Party A', 'Party B', 'A Voters', 'B Voters'),
col=c('red', 'blue', 'red', 'blue'), pch=c(17, 17, 20, 20), bty='n')
}
voterPlot(t="3", dim1="economic", dim2="social")
aggregator <- function(voters=NULL, parties=NULL, affiliations=NULL){
if ( is.null(voters) ) {
voters <- mkVoters(1000)
}
if ( is.null(parties) ) {
parties <- mkParties()
}
if ( is.null(affiliations) ) {
affiliations <- affiliate(voters, parties)
}
Avoters <- which(affiliations=='A')
Bvoters <- which(affiliations=='B')
parties$A <- c(mean(voters[Avoters, 1]), mean(voters[Avoters, 2]))
parties$B <- c(mean(voters[Bvoters, 1]), mean(voters[Bvoters, 2]))
return(parties)
}
par(mfrow=c(2, 2))
plot(a, xlab = "Economic Preference", ylab = "Social Preference", main = "Group a", pch = 20)
plot(b, xlab = "Economic Preference", ylab = "Social Preference", main = "Group b", pch = 20)
plot(c, xlab = "Economic Preference", ylab = "Social Preference", main = "Group c", pch = 20)
plot(d, xlab = "Economic Preference", ylab = "Social Preference", main = "Group d", pch = 20)
aggregator()
aggregator()
relocate <- function(voters=NULL, parties=NULL, affiliations=NULL){
if ( is.null(voters) ) {
voters <- mkVoters(1000)
}
if ( is.null(parties) ) {
parties <- mkParties()
}
if ( is.null(affiliations) ) {
affiliations <- affiliate(voters, parties)
}
Avoters <- which(affiliations=='A')
Bvoters <- which(affiliations=='B')
parties$A <- c(mean(voters[Avoters, 1]), mean(voters[Avoters, 2]))
parties$B <- c(mean(voters[Bvoters, 1]), mean(voters[Bvoters, 2]))
return(parties)
}
ptys <- list(c(-1, -1), c(1, 1))
relocate(parties=ptys)
ptys <- list(A=c(-1, -1), B=c(1, 1))
relocate(parties=ptys)
simulate <- function(iterations, plot=TRUE, seed = NULL, ...){
# The user can choose a random seed for the iterations.
if(!is.null(seed)){
set.seed(seed)
}
# The function can automatically generate voters of normal standard distribution.
# The user can also pass any parameters for choosing the distribution of voters with "...".
voters <- mkVoters(...)
parties <- mkParties()
result <- list(A=matrix(0, nrow=iterations+1, ncol=2),
B=matrix(0, nrow=iterations+1, ncol=2))
result$A[1, ] <- parties$A
result$B[1, ] <- parties$B
# The user should specific the number of total iterations and could choose whether to
# plot the result or not.
if ( plot ) {
voterPlot(voters, parties, t=0)
for ( i in 1:iterations ) {
parties <- aggregator(voters, parties)
result$A[i+1, ] <- parties$A
result$B[i+1, ] <- parties$B
voterPlot(voters, parties, t=i)
}
} else {
for ( i in 1:iterations ) {
parties <- relocate(voters, parties)
result$A[i+1, ] <- parties$A
result$B[i+1, ] <- parties$B
}
}
return(result)
}
simulate(iterations=5, N=100, plot=FALSE)
simulate <- function(iterations, plot=TRUE, seed = NULL, ...){
# The user can choose a random seed for the iterations.
if(!is.null(seed)){
set.seed(seed)
}
# The function can automatically generate voters of normal standard distribution.
# The user can also pass any parameters for choosing the distribution of voters with "...".
voters <- mkVoters(...)
parties <- mkParties()
result <- list(A=matrix(0, nrow=iterations+1, ncol=2),
B=matrix(0, nrow=iterations+1, ncol=2))
result$A[1, ] <- parties$A
result$B[1, ] <- parties$B
# The user should specific the number of total iterations and could choose whether to
# plot the result or not.
if ( plot ) {
voterPlot(voters, parties, t=0)
for ( i in 1:iterations ) {
parties <- relocate(voters, parties)
result$A[i+1, ] <- parties$A
result$B[i+1, ] <- parties$B
voterPlot(voters, parties, t=i)
}
} else {
for ( i in 1:iterations ) {
parties <- relocate(voters, parties)
result$A[i+1, ] <- parties$A
result$B[i+1, ] <- parties$B
}
}
return(result)
}
simulation(iterations=5, N=10, dist='uniform')
simulate(iterations=5, N=10, dist='uniform')
simulate(iterations=5, N=1000, dist='uniform')
simulate(iterations=20, N=100, plot=FALSE)
simulate(iterations=5, N=1000)
simulate(iterations=5, N=1000, dist='mvnorm', sigma=diag(1:2))
simulate(iterations=5, N=1000, dist='mixture', weights=c(0.25, 0.25, 0.5),
sigma=list(diag(1:2), diag(c(1, 1)), diag(2:1)))
par(mfrow=c(3, 3))
simulate(iterations=9, N=1000)
?par()
par(mfrow=c(3, 3), c(0, 0, 0, 0) + 0.1)
simulate(iterations=9, N=1000)
par(mfrow=c(3, 3), mar=c(0, 0, 0, 0) + 0.1)
simulate(iterations=9, N=1000)
dev.off()
par(mfrow=c(3, 3), mar=c(0, 0, 0, 0) + 0.1)
simulate(iterations=8, N=1000)
par(mfrow=c(3, 3), mar=c(, , 1.5, 0) + 0.1)
simulate(iterations=8, N=1000)
par(mfrow=c(3, 3), mar=c(1, 1, 2.5, 1) + 0.1)
simulate(iterations=8, N=1000)
rm(list=ls())
read.csv("dataFinal.csv")
getwd
getwd()
setwd("/Users/luweiying/Desktop/Comparative Party Politics/Party_Bans/DataAnalysis")
read.csv("dataFinal.csv")
dataFinal <- read.csv("dataFinal.csv", header=T, sringAsFactor=FALSE)
dataFinal <- read.csv("dataFinal.csv", header=T)
View(dataFinal)
class(dataFinal$popHM)
read.csv("COW country codes.csv")
COWcode <- read.csv("COW country codes.csv")
View(COWcode)
unique(dataFinal$cow_code)
n(unique(dataFinal$cow_code))
count(unique(dataFinal$cow_code))
sum(unique(dataFinal$cow_code))
table(unique(dataFinal$cow_code))
table(dataFinal)
length(unique(dataFinal$cow_code))
length(unique(dataFinal$ccodealp))
is.na(dataFinal$popHM)
length(is.na(dataFinal$popHM))
sum(is.na(dataFinal$popHM))
sum(is.na(dataFinal$ccodealp))
sum(is.na(dataFinal$cow_code))
sum(is.na(dataFinal$cow_code))
apply(dataFinal, 2, function(x) sum(is.na(x))
###############################
########## Analysis ###########
###############################
# Keep only complete cases
dataFinalComp <- dataFinal[complete.cases(dataFinal),]
# OLS with attacks
summary(plm(n_attacks ~ banall + polity2 + factor(lelecsystem) +
log(oil_gas_valuePOP_2000 + 1) + log(pop_maddison + 1),
data = dataFinal, index=c("scode", "year"),  model="within"))
# Ethnic has unit root.
# OLS with attacks
summary(plm(civtot ~ banall + polity2 + factor(lelecsystem) +
log(oil_gas_valuePOP_2000 + 1) + log(pop_maddison + 1),
data = dataFinal, index=c("scode", "year"),  model="within"))
sum(complete.cases(dataFinal))
for(i in 1:length(dataFinal)){
print(names(dataFinal)[i])
print(table(is.na(dataFinal[,i])))
}
sum(complete.cases(dataFinal))
nrow(dataFinal)
apply(dataFinal, 2, function(x) sum(is.na(x))
###############################
########## Analysis ###########
###############################
# Keep only complete cases
dataFinalComp <- dataFinal[complete.cases(dataFinal),]
# OLS with attacks
summary(plm(n_attacks ~ banall + polity2 + factor(lelecsystem) +
log(oil_gas_valuePOP_2000 + 1) + log(pop_maddison + 1),
data = dataFinal, index=c("scode", "year"),  model="within"))
# Ethnic has unit root.
# OLS with attacks
summary(plm(civtot ~ banall + polity2 + factor(lelecsystem) +
log(oil_gas_valuePOP_2000 + 1) + log(pop_maddison + 1),
data = dataFinal, index=c("scode", "year"),  model="within"))
sum(complete.cases(dataFinal))
for(i in 1:length(dataFinal)){
print(names(dataFinal)[i])
print(table(is.na(dataFinal[,i])))
}
sum(complete.cases(dataFinal))
nrow(dataFinal)
apply(dataFinal, 2, function(x) sum(is.na(x)))
library(countrycode)
?countrycode
countrycode(sourcevar=unique(dataFinal$cow_code), origin="cowc", destination="continent", warn=TRUE)
countrycode(sourcevar=unique(dataFinal$cow_code), origin="cowc", destination="continent", warn=F)
countrycode(sourcevar=unique(dataFinal$cow_code), origin="cown", destination="continent", warn=T)
table(countrycode(sourcevar=unique(dataFinal$cow_code), origin="cown", destination="continent", warn=T))
View(COWcode)
38+25+37+25+4
continentist <- table(countrycode(sourcevar=unique(dataFinal$cow_code), origin="cown", destination="continent", warn=T))
stargazer::stargazer(continentist)
stargazer::stargazer(continentist)
stargazer::stargazer(countrycode(sourcevar=unique(dataFinal$cow_code), origin="cown", destination="continent", warn=T))
head(dataFinal)
summary(dataFinal$year)
summary(dataFinal$polity2)
iep <- read.csv("IEP/IAEPv2_0_2015numeric.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
iep <- read.csv("IEP/IAEPv2_0_2015numeric.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
iep <- read.csv("IAEPv2_0_2015numeric.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
getwd()
iep <- read.csv("IAEPv2_0_2015numeric.csv", sep = ",", header = TRUE)
iep <- load("IAEPv2_0_2015numeric.dta", sep = ",", header = TRUE)
iep <- load("IAEPv2_0_2015numeric.dta")
iep <- read("IAEPv2_0_2015numeric.dta")
iep <- read.table("IAEPv2_0_2015numeric.dta")
View(iep)
iep <- read.dta("IAEPv2_0_2015numeric.dta")
library(foreign)
iep <- read.dta("IAEPv2_0_2015numeric.dta")
iep <- read.dta13("IAEPv2_0_2015numeric.dta")
library(readstata13)
iep <- read.dta13("IAEPv2_0_2015numeric.dta")
View(iep)
View(dataFinal)
summary(dataFinal)
stargazer::stargazer(summary(dataFinal))
stargazer::stargazer(dataFinal)
continentist
sum(dataFinal$banethnic)
!is.na(dataFinal$banethnic)
sum(!is.na(dataFinal$banethnic))
allKindsBans <- c(dataFinal$banethnic, dataFinal$banrelig, dataFinal$bansys, dataFinal$banall, dataFinal$partybanIEP))
allKindsBans <- c(dataFinal$banethnic, dataFinal$banrelig, dataFinal$bansys, dataFinal$banall, dataFinal$partybanIEP)
sapply(allKindsBans, function(x) sum(!is.na(x)))
head(dataFinal[,c(16, 17, 18, 19, 20)])
dataFinal[,c(17, 18, 19, 20, 21)]
head(dataFinal[,c(17, 18, 19, 20, 21)])
allKindsBans <- head(dataFinal[,c(17, 18, 19, 20, 21)])
sapply(allKindsBans, function(x) sum(!is.na(x)))
allKindsBans <- dataFinal[,c(17, 18, 19, 20, 21)]
sapply(allKindsBans, function(x) sum(!is.na(x)))
sapply(allKindsBans, function(x) sum(x))
allKindsBans <- dataFinal[,c(17, 18, 19, 20, 21)]
head(allKindsBans)
allKindsBans <- dataFinal[,c(18, 19, 20, 21, 22)]
head(allKindsBans)
allKindsBans <- dataFinal[,c(18, 19, 20, 21, 24)]
allKindsBans <- dataFinal[,c(18, 19, 20, 21, 24)]
head(allKindsBans)
sapply(allKindsBans, function(x) sum(x))
sapply(allKindsBans, colSums)
colSums(allKindsBans)
allKindsBans <- dataFinal[,c(5, 18, 19, 20, 21, 24)]
colSums(allKindsBans)
allKindsBans <- as.numeric(dataFinal[,c(5, 18, 19, 20, 21, 24)])
class(dataFinal[,c(5, 18, 19, 20, 21, 24)])
class(dataFinal$banethnic)
class(dataFinal$partybanIEP)
is.numeric(dataFinal$partybanIEP)
c(115, 181, 1172, 436)/4349
sum(dataFinal$partybanIEP)
length(dataFinal$partybanIEP)
tail(dataFinal$partybanIEP)
is.numeric(dataFinal$partybanIEP)
unique(dataFinal$partybanIEP)
sapply(allKindsBans, function(x) sum(!is.na(x)))
sapply(allKindsBans, function(x) sum(!is.na(x), na.omit))
colSums(allKindsBans, na.omit) # Observations
colSums(allKindsBans, na.rm) # Observations
sum(dataFinal$partybanIEP, na.omit=TRUE)
sum(na.omit(dataFinal$partybanIEP))
sapply(allKindsBans, function(x) sum(!is.na(x)))
sum(na.omit(dataFinal$party_banVD))
1495/4272
1782/4340
nrow(dataFinal[dataFinal$dd_cga==1]
# An overview of party bans
allKindsBans <- class(dataFinal[,c(5, 18, 19, 20, 21, 24)])
sapply(allKindsBans, function(x) sum(!is.na(x)))
colSums(allKindsBans) # Observations
c(115, 181, 1172, 436)/4349
sum(na.omit(dataFinal$partybanIEP))
1782/4340 # Proportion by IEP
sum(na.omit(dataFinal$party_banVD))
1495/4272 # Proportion by V-Dem
###############################
########## Analysis ###########
###############################
# Keep only complete cases
dataFinalComp <- dataFinal[complete.cases(dataFinal),]
# OLS with attacks
summary(plm(n_attacks ~ banall + polity2 + factor(lelecsystem) +
log(oil_gas_valuePOP_2000 + 1) + log(pop_maddison + 1),
data = dataFinal, index=c("scode", "year"),  model="within"))
# Ethnic has unit root.
# OLS with attacks
summary(plm(civtot ~ banall + polity2 + factor(lelecsystem) +
log(oil_gas_valuePOP_2000 + 1) + log(pop_maddison + 1),
data = dataFinal, index=c("scode", "year"),  model="within"))
sum(complete.cases(dataFinal))
for(i in 1:length(dataFinal)){
print(names(dataFinal)[i])
print(table(is.na(dataFinal[,i])))
}
sum(complete.cases(dataFinal))
nrow(dataFinal)
nrow(dataFinal[dataFinal$dd_cga==1])
nrow(dataFinal[dataFinal$dd_cga==1,])
nrow(dataFinal[dataFinal$dd_cga==0,])
nrow(dataFinal[dataFinal$govstruct==1,])
nrow(dataFinal[dataFinal$govstruct==2,])
nrow(dataFinal[dataFinal$govstruct==3,])
nrow(dataFinal[dataFinal$elecSystem==1,])
nrow(dataFinal[dataFinal$elecSystem==2,])
nrow(dataFinal[dataFinal$elecSystem==3,])
nrow(dataFinal[dataFinal$elecSystem==4,])
nrow(dataFinal[dataFinal$elecSystem==0,])
nrow(dataFinal[dataFinal$elecSystem==5,])
Democ <- dataFinal[dataFinal$dd_cga=1]
Democ <- dataFinal[,dataFinal$dd_cga=1]
Democ <- dataFinal[,dataFinal$dd_cga==1]
Democ <- dataFinal[dataFinal$dd_cga==1,]
View(Democ)
Dictat <- dataFinal[dataFinal$dd_cga==2,]
!is.na(dataFinal$dd_cga)
sum(!is.na(dataFinal$dd_cga))
Dictat <- dataFinal[dataFinal$dd_cga==0,]
Democ <- dataFinal[na.omit(dataFinal$dd_cga)==1,]
table(dataFinal$dd_cga)
Dictat <- dataFinal[na.omit(dataFinal$dd_cga)==0,]
Democ <- dataFinal[na.omit(dataFinal$dd_cga)==1,]
Dictat <- dataFinal[na.omit(dataFinal$dd_cga)==0,]
Democ[,c(5, 18, 19, 20, 21, 24)]
sapply(Democ[,c(5, 18, 19, 20, 21, 24)], function(x) sum(!is.na(x)))
table(dataFinal[,c(5, 18, 19, 20, 21, 24)])
table(dataFinal[,18])
table(dataFinal[,19])
table(dataFinal[,20])
table(dataFinal[,21])
sapply(Democ[,c(18, 19, 20, 21, 24)], function(x) sum(!is.na(x)))
Democ[,18]
sapply(Democ[,c(18, 19, 20, 21, 24)], function(x) length(!is.na(x)))
sum(Democ[,18])
apply(Democ[,c(18, 19, 20, 21, 24)], 2, function(x) sum(!is.na(x)))
sum(Democ[,18])
sum(Democ[,19])
sum(Democ[,20])
sum(Democ[,21])
sum(Democ[,24])
sum(na.omit(Democ[,24]))
table(dataFinal$dd_cga)
View(Democ)
Democ <- dataFinal[na.omit(dataFinal$dd_cga)==1,]
View(Democ)
View(Democ)
na.omit(dataFinal$dd_cga)
Dictat <- dataFinal[na.omit(dataFinal$dd_cga)==0,]
View(Dictat)
rm(Democ)
rm(Dictat)
Democ <- dataFinal[dataFinal$dd_cga==1,]
Democ <- subset(dataFinal,dataFinal$dd_cga==1)
Dictat <- subset(dataFinal,dataFinal$dd_cga==0)
sum(na.omit(Democ[,18]))
sum(Democ[,18])
sum(Democ[,18])
sum(Democ[,19])
sum(Democ[,20])
sum(Democ[,21])
sum(Democ[,24])
sum(na.omit(Democ[,24]))
c(42, 31, 402, 10, 470)/1886
round(c(42, 31, 402, 10, 470)/1886)
round(c(42, 31, 402, 10, 470)/1886, 0.001)
round(c(42, 31, 402, 10, 470)/1886, 3)
sum(na.omit(Dictat[,18]))
sum(na.omit(Dictat[,19]))
sum(na.omit(Dictat[,20]))
sum(na.omit(Dictat[,21]))
sum(na.omit(Dictat[,24]))
c(53, 128, 702, 386, 1179)/1964
round(c(53, 128, 702, 386, 1179)/1964,3)
library(plyr)
library(data.table)
library(readxl)
library(foreign)
library(readstata13)
library(stringi)
library(plm)
library(car)
library(dplyr)
library(stargazer)
library(countrycode)
Data <- read.dta13("dataRegressions.dta", header = T, stringAsfactor=F)
Data <- read.dta13("dataRegressions.dta")
View(Data)
View(Data)
data <- read.dta13("dataRegressions.dta")
rm(Data)
Democ <- subset(data,data$dd_cga==1)
Dictat <- subset(data,data$dd_cga==0)
View(Democ)
sum(na.omit(Democ[,17]))
class(Democ[,17])
?read.dta
data <- read.dta13("dataRegressions.dta", convert.factors = FALSE)
Democ <- subset(data,data$dd_cga==1)
Dictat <- subset(data,data$dd_cga==0)
sum(na.omit(Democ[,17]))
class(Democ[,17])
data <- as.numeric(read.dta13("dataRegressions.dta", convert.factors = FALSE))
sum(as.numeric(na.omit(Democ[,17])))
head(Democ[,17])
colnames(Democ[,17])
colname(Democ[,17])
head(Democ)
sapply(Democ[,c(17, 18, 19, 20, 23)], function(x) sum(as.numeric(na.omit(Democ[,x]))))
Democ[,c(17, 18, 19, 20, 23)]
sapply(Democ[,c(17, 18, 19, 20, 23)], function(x) sum(as.numeric(na.omit(Democ[,x]))))
apply(Democ[,c(17, 18, 19, 20, 23)], 2, function(x) sum(as.numeric(na.omit(x))))
table(dataFinal$dd_cga)
table(data$dd_cga)
c(35, 26, 291, 8, 351)/1321
round(c(35, 26, 291, 8, 351)/1321 ,3)
apply(Dictat[,c(17, 18, 19, 20, 23)], 2, function(x) sum(as.numeric(na.omit(x))))
round(c(42, 93, 470, 183, 723)/1176 ,3)
unique(data$govstruct)
nrow(data[data$govstruct==1,])
nrow(data[data$govstruct==2,])
nrow(data[data$govstruct==3,])
nrow(data[data$govstruct==2 | 3,])
35+682
nrow(data[data$elecSystem==1,])
nrow(data[data$elecSystem==2,])
nrow(data[data$elecSystem==3,])
nrow(data[data$elecSystem==4,])
790+623
482+602
stargazer(data)
rm
